apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kanidm
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: kanidm
  selector:
    matchLabels:
      app: kanidm
  {{- if not (or (eq (int .Values.replicas) 0) (eq (int .Values.replicas) 1)) }}
  {{- fail (printf "replicas must be either 0 or 1. Provided value: %d" (int .Values.replicas)) }}
  {{- end }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: kanidm
    spec:
      containers:
      - image: "kanidm/server:{{ .Chart.AppVersion }}"
        name: kanidm
        ports:
          - name: https
            containerPort: 8443
          - name: ldaps
            containerPort: 3636
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - curl https://{{ .Values.domain }}:8443/status --cacert /tls/tls.crt --resolve {{ .Values.domain }}:8443:127.0.0.1
          initialDelaySeconds: 30
        env:
        # This is not documented in the kanidm docs, but the ServerConfig code
        # https://kanidm.github.io/kanidm/master/rustdoc/kanidmd_core/config/struct.ServerConfig.html#structfield.adminbindpath
        - name: KANIDM_ADMIN_BIND_PATH
          value: "/var/run/kanidmd.sock"
        {{- if not (or (eq .Values.logLevel "info") (eq .Values.logLevel "debug") (eq .Values.logLevel "trace")) }}
        {{- fail (printf "logLevel must be one of: info, debug, trace. Provided value: %s" .Values.logLevel) }}
        {{- end }}
        - name: KANIDM_LOG_LEVEL
          value: {{ .Values.logLevel }}
        volumeMounts:
        - name: tls
          mountPath: /tls
          readOnly: true
        - name: db
          mountPath: /db
        - name: backup
          mountPath: /backups
        - name: config
          mountPath: /data/server.toml
          subPath: server.toml
          readOnly: true
        - name: socket-volume
          mountPath: /var/run
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
      volumes:
      - name: tls
        secret:
          secretName: {{ .Values.ingress.tlsSecretName }}
      - name: config
        configMap:
          name: kanidm-config
          items:
          - key: server.toml
            path: server.toml
      - name: socket-volume
        emptyDir: {}
      securityContext:
        runAsGroup: 5000
        runAsUser: 5000
        fsGroup: 5000
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
  volumeClaimTemplates:
  - metadata:
      name: db
    spec:
      storageClassName: {{ .Values.storageClassName }}
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 200Mi
  - metadata:
      name: backup
    spec:
      storageClassName: {{ .Values.storageClassName }}
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
